@page "/habitacionesform/{id:int?}"

@using WebTest5.Components.Enum
@using WebTest5.Components.Interface
@using WebTest5.Components.Model

@rendermode InteractiveServer

@inject NavigationManager Navigation
@inject IHabitacionesService habitacionesService
@inject ICategoriasService categoriasService

@if (habitacion == null && tipoHabitaciones == null && estadosHabitacion == null)
{
	<MudPaper Height="400px" Class="justify-center d-flex">
		<MudProgressCircular Color="Color.Dark" Indeterminate="true" Size="Size.Large" Class="align-self-center" />
	</MudPaper>
}
else
{

	@if (!login.isLoggedIn)
	{
		<MudText Typo="Typo.h6">Inicia sesion para continuar</MudText>
	}
	else
	{
		@if (login.isRecepcionist || login.isManager)
		{
			<MudGrid>
				<MudItem xs="11" sm="11">
					<MudCard Elevation="5">
						<MudCardHeader Class="justify-center d-flex">
							<MudText Typo="Typo.h5">HABITACIÓN</MudText>
						</MudCardHeader>
						<MudCardContent>
							<MudForm @ref="@form" Model="@habitacion" Class="px-4">
								<MudTextField T="string" Label="Nombre" @bind-Value="habitacion.Nombre" Margin="Margin.Normal" Required="true" RequiredError="¡Debe ingresar un nombre!" />
								<MudStack Row="true">
									<MudSelect T="int" Label="Tipo de Habitacion" @bind-Value="habitacion.Tipo" Margin="Margin.Normal" Required="true" AnchorOrigin="Origin.BottomCenter" >
										@if(tipoHabitaciones!=null)
										@foreach (var tipo in tipoHabitaciones)
										{
											<MudSelectItem Value="tipo.Id">@tipo.Nombre (Bs @tipo.Precio,00)</MudSelectItem>
										}
									</MudSelect>
									<MudSelect T="int" Label="Estado de Habitacion" @bind-Value="habitacion.Id_Estado" Margin="Margin.Normal" Required="true" AnchorOrigin="Origin.BottomCenter">
										@if(estadosHabitacion!=null)
										@foreach (var estado in estadosHabitacion)
										{
											<MudSelectItem Value="estado.Id">@estado.Nombre</MudSelectItem>
										}
									</MudSelect>
								</MudStack>
							</MudForm>
						</MudCardContent>
						<MudCardActions>
							<MudButton Variant="Variant.Filled" Color="Color.Success" Class="ml-auto" Disabled="@disabled" OnClick="@(async () => await Submit())">Guardar</MudButton>
							<MudButton Variant="Variant.Outlined" Color="Color.Error" DisableElevation="true" OnClick="Cancel" Class="mx-2">Cancelar</MudButton>
						</MudCardActions>
					</MudCard>
				</MudItem>
			</MudGrid>
		}
		else
		{
			<MudText Typo="Typo.h6">No tienes permiso para acceder</MudText>
		}
	}
}

@code {
	[Parameter]
	public int? Id { get; set; }
	MudForm form;
	HabitacionesModel habitacion = new HabitacionesModel();
	IEnumerable<TipoHabitacionesModel> tipoHabitaciones;
	IEnumerable<EstadosHabitacionModel> estadosHabitacion;
	private FormMode formMode;
	bool disabled = false;
	LoginSingleton login;

	protected override async Task OnInitializedAsync()
	{
		login = await LoginSingleton.GetInstance();
		formMode = Id.HasValue ? FormMode.Edit : FormMode.Add;
		if (formMode == FormMode.Edit)
		{
			habitacion = await habitacionesService.GetHabitacion(Id);
		}
		tipoHabitaciones = await habitacionesService.GetTipoHabitaciones();
		estadosHabitacion = await categoriasService.GetEstadosHabitacion();
	}

	private async Task Submit()
	{
		await form.Validate();

		if (form.IsValid)
		{
			disabled = true;
			await habitacionesService.UpdateHabitacion(habitacion);
			Navigation.NavigateTo("/habitaciones");
		}
	}

	private void Cancel()
	{
		Navigation.NavigateTo("/habitaciones");
	}
}
