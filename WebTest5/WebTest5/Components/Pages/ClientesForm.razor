@page "/clientesform/{id:int?}"

@using WebTest5.Components.Interface
@using WebTest5.Components.Model
@using WebTest5.Components.Enum

@rendermode InteractiveServer

@inject IClientesService clientesService
@inject ICategoriasService categoriasService
@inject IDialogService DialogService
@inject NavigationManager Navigation

@if (cliente == null)
{
	<MudPaper Height="400px" Class="justify-center d-flex">
		<MudProgressCircular Color="Color.Dark" Indeterminate="true" Size="Size.Large" Class="align-self-center" />
	</MudPaper>
}
else
{
	@if (!login.isLoggedIn)
	{
		<MudText Typo="Typo.h6">Inicia sesion para continuar</MudText>

	}
	else
	{
		@if (login.isRecepcionist || login.isManager)
		{		
			<MudGrid>
				<MudItem xs="11" sm="11">
					<MudCard Elevation="5">
						<MudCardHeader Class="justify-center d-flex">
							<MudText Typo="Typo.h5">CLIENTE</MudText>
						</MudCardHeader>
						<MudCardContent>
							<MudForm @ref="@form" Model="@cliente" Class="px-4">
								<MudStack Row="true">
									<MudNumericField T="int" Label="Numero de Carnet de Identidad" @bind-Value="cliente.Cid" HideSpinButtons="true" Margin="Margin.Normal" Required="true" RequiredError="¡Debe ingresar un numero de carnet de identidad!" />
									<MudTextField T="string" Label="Nombre" @bind-Value="cliente.Nombre_Completo" Margin="Margin.Normal" Required="true" RequiredError="¡Debe ingresar un nombre!" />
								</MudStack>
								<MudStack Row="true">
								<MudTextField T="string" Label="Direccion" @bind-Value="cliente.Direccion_Residencia" Margin="Margin.Normal" Required="false" />
								<MudTextField T="string" Label="Correo Electronico" @bind-Value="cliente.Correo_Electronico" Margin="Margin.Normal" Required="false" RequiredError="¡Debe ingresar un correo electronico!" />
								</MudStack>
								<MudStack Row="true">
									<MudSelect T="int" Label="Pais" @bind-Value="cliente.Pais" Margin="Margin.Normal" Required="true" AnchorOrigin="Origin.BottomCenter">
										@if (paises != null)
											@foreach (var pais in paises)
											{
												<MudSelectItem Value="pais.Id">@pais.Nombre</MudSelectItem>
											}
									</MudSelect>
									<MudSelect T="int" Label="Ciudad" @bind-Value="cliente.Ciudad_Procedencia" Margin="Margin.Normal" Required="false" AnchorOrigin="Origin.BottomCenter">
										@if (ciudades != null)
											@foreach (var ciudad in ciudades)
											{
												<MudSelectItem Value="ciudad.Id">@ciudad.Nombre</MudSelectItem>
											}
									</MudSelect>
								</MudStack>
								<MudStack Row="true">
									<MudSelect T="int" Label="Profesion" @bind-Value="cliente.Profesion" Margin="Margin.Normal" Required="false" AnchorOrigin="Origin.BottomCenter">
										@if (profesiones != null)
											@foreach (var profesion in profesiones)
											{
												<MudSelectItem Value="profesion.Id">@profesion.Nombre</MudSelectItem>
											}
									</MudSelect>
									<MudButton OnClick="@ShowProfesionDialog" Variant="Variant.Outlined" Color="Color.Primary" Class="add-item-btn ma-4">Añadir Profesion</MudButton>
								</MudStack>
								<MudStack Row="true">
									<MudDatePicker Label="Fecha de Nacimiento" @bind-Date="fechaNacimiento" DisableToolbar="true" Margin="Margin.Normal" Required="true" />
									<MudNumericField T="int" Label="Telefono" @bind-Value="cliente.Telefono" Margin="Margin.Normal" Required="false" RequiredError="¡Debe ingresar un telefono!" />
								</MudStack>
							</MudForm>
						</MudCardContent>
						<MudCardActions>
							<MudButton Variant="Variant.Filled" Color="Color.Success" Class="ml-auto" Disabled="@disabled" OnClick="@(async () => await Submit())">Guardar</MudButton>
							<MudButton Variant="Variant.Outlined" Color="Color.Error" DisableElevation="true" OnClick="Cancel" Class="mx-2">Cancelar</MudButton>
						</MudCardActions>
					</MudCard>
				</MudItem>
			</MudGrid>
		}
		else
		{
			<MudText Typo="Typo.h6">No tienes permiso para acceder</MudText>
		}
	}
}

@code {
	[Parameter]
	public int? Id { get; set; }
	private MudForm form;
	private ClientesModel cliente = new ClientesModel();
	private IEnumerable<PaisesModel> paises;
	private IEnumerable<CiudadesModel> ciudades;
	private IEnumerable<ProfesionesModel> profesiones;
	private DateTime? fechaNacimiento { get; set; }
	private FormMode formMode;
	bool disabled = false;
	LoginSingleton login;

	protected override async Task OnInitializedAsync()
	{
		login = await LoginSingleton.GetInstance();
		formMode = Id.HasValue ? FormMode.Edit : FormMode.Add;
		if (formMode == FormMode.Edit)
		{
			cliente = await clientesService.GetCliente(Id);
			fechaNacimiento = cliente.Fecha_Nacimiento;
		}
		paises = await categoriasService.GetPaises();
		ciudades = await categoriasService.GetCiudades();
		profesiones = await categoriasService.GetProfesiones();
	}

	private async Task Submit()
	{
		cliente.Fecha_Nacimiento = fechaNacimiento ?? DateTime.MinValue;
		await form.Validate();

		if (form.IsValid)
		{
			disabled = true;
			if (formMode == FormMode.Add)
				await clientesService.AddCliente(cliente);
			else
			if (formMode == FormMode.Edit)
				await clientesService.UpdateCliente(cliente, Id);
			Navigation.NavigateTo("/clientes");
		}
	}

	private void Cancel()
	{
		Navigation.NavigateTo("/clientes");
	}

	private async Task ShowProfesionDialog()
	{
		DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
		var dialog = DialogService.Show<DialogProfesion>("Añadir Profesion", closeOnEscapeKey);
		var result = await dialog.Result;

		if (!result.Canceled)
		{
			profesiones = await categoriasService.GetProfesiones();
		}
	}
}
