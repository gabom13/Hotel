@page "/reservasadd"

@using WebTest5.Components.Interface
@using WebTest5.Components.Model
@using WebTest5.Components.Enum

@rendermode InteractiveServer

@inject IDialogService DialogService
@inject IReservasService reservasService
@inject IClientesService clientesService
@inject ICategoriasService categoriasService
@inject IHabitacionesService habitacionesService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

@if (clientes == null && motivosReserva == null)
{
	<MudPaper Height="400px" Class="justify-center d-flex">
		<MudProgressCircular Color="Color.Dark" Indeterminate="true" Size="Size.Large" Class="align-self-center" />
	</MudPaper>
}
else
{
	@if (!login.isLoggedIn)
	{
		<MudText Typo="Typo.h6">Inicia sesion para continuar</MudText>
	}
	else
	{
		@if (login.isRecepcionist || login.isManager)
		{
			<MudGrid>
				<MudItem xs="11" sm="11">
					<MudCard Elevation="5">
						<MudCardHeader Class="justify-center d-flex">
							<MudText Typo="Typo.h5">RESERVA</MudText>
						</MudCardHeader>
						<MudCardContent>
							<MudForm @ref="@form" Model="@reserva" Class="px-4">
								<MudStack Row="true">
									@*COMPONENTE AUTOCOMPLETE en Forms & Inputs*@
									<MudSelect T="int" Label="Titular" @bind-Value="reserva.Id_Titular" Margin="Margin.Normal" Required="true" RequiredError="Debe ingresar un titular" AnchorOrigin="Origin.BottomCenter">
										@foreach (var cliente in clientes)
										{
											<MudSelectItem Value="cliente.Cid">@cliente.Nombre_Completo </MudSelectItem>
										}
									</MudSelect>
									<MudDateRangePicker Label="Fecha de Reserva" PickerVariant="PickerVariant.Dialog" TitleDateFormat="dddd, dd MMMM" DateRangeChanged="@(async e => await DateRangeChange(e))" Margin="Margin.Normal" Required="true" RequiredError="Debe ingresar una fecha" />
								</MudStack>
								<MudStack Row="true">
									<MudSelect T="int" Label="Motivo de Reserva" @bind-Value="reserva.Motivo_Reserva" Margin="Margin.Normal" Required="false" AnchorOrigin="Origin.BottomCenter">
										@if(motivosReserva!=null)
										@foreach (var motivoReserva in motivosReserva)
										{
											<MudSelectItem Value="motivoReserva.Id">@motivoReserva.Nombre</MudSelectItem>
										}							
									</MudSelect>
									<MudButton OnClick="@ShowMotivosReservaDialog" Variant="Variant.Outlined" Color="Color.Primary" Class="add-item-btn ma-4">Añadir Motivo de Reserva</MudButton>
									<MudSelect T="int" Label="Empresa" @bind-Value="reserva.Empresa" Margin="Margin.Normal" Required="false" AnchorOrigin="Origin.BottomCenter">
										@if (empresas != null)
											@foreach (var empresa in empresas)
											{
												<MudSelectItem Value="empresa.Id">@empresa.Nombre</MudSelectItem>
											}
									</MudSelect>
									<MudButton OnClick="@ShowEmpresaDialog" Variant="Variant.Outlined" Color="Color.Primary" Class="add-item-btn ma-4">Añadir Empresa</MudButton>
								</MudStack>
								<MudStack Row="true">
									<MudNumericField T="int" Label="Descuento (%)" @bind-Value="reserva.Descuento" HideSpinButtons="true" Margin="Margin.Normal" Required="false" />
									<MudNumericField T="int" Label="Pax" @bind-Value="reserva.Pax" HideSpinButtons="true" Required="false" Margin="Margin.Normal" RequiredError="¡Debe ingresar el Pax!" />
									<MudDatePicker Label="Fecha de registro	" @bind-Date="fechaReserva" DisableToolbar="true" Margin="Margin.Normal" Required="true" Editable="false" ReadOnly="true" />
								</MudStack>
									<MudTextField T="string" Label="Nota" @bind-Value="reserva.Nota" Required="false" />
								<br />
								<br />			
								<MudDataGrid T="ClientesModel" Items="@clientes" MultiSelection="true" Hover="true" QuickFilter="@_quickFilter" @bind-SelectedItems="grupoClientes" Elevation="3">
									<ToolBarContent>
										<MudText Typo="Typo.h6">Clientes</MudText>
										<MudSpacer />
										<MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
													  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>									
									</ToolBarContent>
									<Columns>
										<SelectColumn T="ClientesModel" ShowInFooter="false" ShowInHeader="false" />
										<PropertyColumn Property="c => c.Cid" Title="Cid" />
										<PropertyColumn Property="c => c.Nombre_Completo" Title="Nombre Completo" />
									</Columns>
										<PagerContent>

											<MudDataGridPager T="ClientesModel" PageSizeOptions=@(new int[] {5, 10, 20}) 
											RowsPerPageString=""
											InfoFormat="{last_item} de {all_items}" />
										</PagerContent>

								</MudDataGrid>
								<br />						
								<MudPaper Elevation="1" Class="justify-center d-flex">
									<MudText Class="pa-4">Clientes seleccionados (@grupoClientes?.Count): @(grupoClientes == null ? "" : string.Join(", ", grupoClientes.OrderBy(x => x.Nombre_Completo).Select(x => x.Nombre_Completo)))</MudText>
								</MudPaper>		
								<br/>
								<br />
								@if (habitaciones == null)
								{
									<MudPaper Class="pa-4 justify-center d-flex" Elevation="5">
										<MudText >Seleccione una fecha de llegada y una fecha de salida</MudText>
									</MudPaper>
								}
								else
								{
									<MudGrid>
										<MudItem xs="12" sm="12">
												<MudCard Elevation="3">
												<MudCardHeader Class="justify-center d-flex flex-wrap">
														<MudItem xs="12" sm="12" Class="justify-center d-flex flex-wrap">
														<MudText Typo="Typo.h6">HABITACIONES</MudText>
													</MudItem>
													<MudItem xs="12" sm="12">
														<MudText>Habitaciones seleccionadas (@grupoHabitaciones?.Count): @(grupoHabitaciones == null ? "" : string.Join(", ", grupoHabitaciones.OrderBy(x => x.Nombre).Select(x => x.Nombre)))</MudText>
													</MudItem>
												</MudCardHeader>
												<MudCardContent>
													<MudGrid>
														<MudItem xs="4" sm="4">
																<MudCard Elevation="2">
																	<MudCardHeader Class="justify-center d-flex flex-wrap">
																		<MudText Typo="Typo.h6">NORMAL (Bs 100,00)</MudText>
																		<MudImage Src="/normal.jpg" Fluid="true" Alt="Hotel Angostura" Class="rounded-lg"></MudImage>
																	</MudCardHeader>
																<MudCardContent>
																		<MudTable @ref="_table" T="HabitacionesModel" Items="@habitaciones.Where(h=>h.Tipo==1)" Dense="true" MultiSelection="true" Hover="true"
																				  @bind-SelectedItems="grupoHabitaciones" SelectOnRowClick="true" Elevation="0" Outlined="true">
																			<HeaderContent>
																				<MudTh>Número de Habitacón</MudTh>
																			</HeaderContent>
																			<RowTemplate>
																				<MudTd>@context.Nombre</MudTd>
																			</RowTemplate>
																		</MudTable>
																</MudCardContent>
															</MudCard>
														</MudItem>
														<MudItem xs="4" sm="4">
															<MudCard Elevation="2">
																	<MudCardHeader Class="justify-center d-flex flex-wrap">
																		<MudText Typo="Typo.h6">DOBLE (Bs 180,00)</MudText>
																		<MudImage Src="/doble.jpg" Fluid="true" Alt="Hotel Angostura" Class="rounded-lg"></MudImage>
																	</MudCardHeader>
																<MudCardContent>
																		<MudTable @ref="_table" T="HabitacionesModel" Items="@habitaciones.Where(h=>h.Tipo==2)" Dense="true" MultiSelection="true" Hover="true"
																				  @bind-SelectedItems="grupoHabitaciones" SelectOnRowClick="true" Elevation="0" Outlined="true">
																			<HeaderContent>
																				<MudTh>Número de Habitacón</MudTh>
																			</HeaderContent>
																			<RowTemplate>
																				<MudTd>@context.Nombre</MudTd>
																			</RowTemplate>
																		</MudTable>
																</MudCardContent>
															</MudCard>
														</MudItem>
														<MudItem xs="4" sm="4">
															<MudCard Elevation="2">
																<MudCardHeader Class="justify-center d-flex flex-wrap">
																		<MudText Typo="Typo.h6">VIP (Bs 300,00)</MudText>
																		<MudImage Src="/vip.jpg" Fluid="true" Alt="Hotel Angostura" Class="rounded-lg"></MudImage>
																</MudCardHeader>
																<MudCardContent>
																	<MudTable @ref="_table" T="HabitacionesModel" Items="@habitaciones.Where(h=>h.Tipo==3)" Dense="true" MultiSelection="true" Hover="true"
																				@bind-SelectedItems="grupoHabitaciones" SelectOnRowClick="true" Elevation="0" Outlined="true">
																		<HeaderContent>
																				<MudTh>Número de Habitacón</MudTh>
																		</HeaderContent>
																		<RowTemplate>
																			<MudTd>@context.Nombre</MudTd>
																		</RowTemplate>
																	</MudTable>
																</MudCardContent>
															</MudCard>
														</MudItem>
													</MudGrid>
												</MudCardContent>
											</MudCard>
										</MudItem>
									</MudGrid>
								}
							</MudForm>				
						</MudCardContent>
						<MudCardActions>
							<MudButton Variant="Variant.Filled" Color="Color.Success" Class="ml-auto" Disabled="@disabled" OnClick="@(async () => await Submit())">Guardar</MudButton>
							<MudButton Variant="Variant.Outlined" Color="Color.Error" DisableElevation="true" OnClick="Cancel" Class="mx-2">Cancelar</MudButton>
						</MudCardActions>
					</MudCard>
				</MudItem>
			</MudGrid>
		}
		else
		{
			<MudText Typo="Typo.h6">No tienes permiso para acceder</MudText>
		}
	}
}

@code {
	MudForm form;
	ReservasModel reserva;
	LoginSingleton login;

	HashSet<ClientesModel> grupoClientes;
	HashSet<HabitacionesModel> grupoHabitaciones;
	HashSet<HabitacionesModel> grupoHabitaciones2;
	IEnumerable<ClientesModel> clientes;
	IEnumerable<HabitacionesModel> habitaciones;
	IEnumerable<MotivosReservaModel> motivosReserva;
	IEnumerable<EmpresasModel> empresas;
	IEnumerable<TipoHabitacionesModel> tipoHabitaciones;
	 MudTable<HabitacionesModel> _table;
	DateTime? fechaLlegada{ get; set; }
	DateTime? fechaSalida { get; set; }
	DateTime? fechaReserva { get; set; }

	string _searchString;
	bool disabled = false;
	string _selectedItemText = "Ninguna habitacion ha sido seleccionada";
	Func<ClientesModel, bool> _quickFilter => x =>
	{
		if (string.IsNullOrWhiteSpace(_searchString))
			return true;
		if (x.Nombre_Completo.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (x.Cid.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	};

	protected override async Task OnInitializedAsync()
	{
		login = await LoginSingleton.GetInstance();
		reserva = new ReservasModel();
		clientes = await clientesService.GetClientes();
		motivosReserva = await categoriasService.GetMotivosReserva();
		empresas = await categoriasService.GetEmpresas();
		tipoHabitaciones = await habitacionesService.GetTipoHabitaciones();
		fechaReserva = DateTime.Now;
	}

	private async Task Submit()
	{
		await form.Validate();
		if (form.IsValid)
		{
			reserva.Fecha_Llegada = fechaLlegada ?? DateTime.MinValue;
			reserva.Fecha_Salida = fechaSalida ?? DateTime.MinValue;
			reserva.Fecha_Reserva = fechaReserva ?? DateTime.MinValue;
			reserva.Id_Estado=((int)EstadosReservaEnum.Pendiente);

			if (grupoClientes == null || grupoClientes.Count < 1)
				Snackbar.Add("Debe seleccionar al menos 1 cliente", Severity.Error);
			else
			if (grupoHabitaciones == null || grupoHabitaciones.Count < 1)
				Snackbar.Add("Debe seleccionar al menos 1 habitación", Severity.Error);
			else
			{
				disabled = true;
				await reservasService.AddReserva(reserva);
				int id = (await reservasService.GetLastReservaId());
				await AddGrupoClientes(id);
				await AddGrupoHabitaciones(id);		
				Navigation.NavigateTo("/reservas");
			}
		}
	}

	private void Cancel()
	{
		Navigation.NavigateTo("/reservas");
	}

	private async Task AddGrupoClientes(int id)
	{
		foreach (var cliente in grupoClientes)
		{
			await reservasService.AddGrupoHuespedes(new GrupoHuespedesModel { Id = id, Huesped = cliente.Cid });
		}
	}

	private async Task AddGrupoHabitaciones(int id)
	{
		foreach (var habitacion in grupoHabitaciones)
		{
			await reservasService.AddGrupoHabitaciones(new GrupoHabitacionesModel { Id = id, Habitacion = habitacion.Id });
		}
	}

	private async Task DateRangeChange(DateRange dateRange)
	{
		fechaLlegada = dateRange.Start;
		fechaSalida = dateRange.End;
		habitaciones = await reservasService.GetAvailableRooms(fechaLlegada ?? DateTime.MinValue, fechaSalida ?? DateTime.MinValue);
		await SetCustomColums();
	}

	private async Task ShowMotivosReservaDialog()
	{
		DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
		var dialog = DialogService.Show<DialogMotivoReserva>("Añadir Motivo de Reserva", closeOnEscapeKey);
		var result = await dialog.Result;

		if (!result.Canceled)
		{
			motivosReserva = await categoriasService.GetMotivosReserva();
		}
	}

	private async Task ShowEmpresaDialog()
	{
		DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
		var dialog = DialogService.Show<DialogEmpresa>("Añadir Empresa", closeOnEscapeKey);
		var result = await dialog.Result;

		if (!result.Canceled)
		{
			empresas = await categoriasService.GetEmpresas();
		}
	}

	private Task SetCustomColums()
	{
		foreach (var h in habitaciones)
		{
			h.NombreTipo = tipoHabitaciones.FirstOrDefault(t => t.Id == h.Tipo).Nombre;
		}
		return Task.CompletedTask;
	}
}